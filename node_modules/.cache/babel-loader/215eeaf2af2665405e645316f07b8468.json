{"ast":null,"code":"import _classCallCheck from \"/Users/ayumisekine/todo_app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ayumisekine/todo_app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ayumisekine/todo_app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ayumisekine/todo_app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/Users/ayumisekine/todo_app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/ayumisekine/todo_app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ayumisekine/todo_app/src/compornents/InputField.jsx\";\nimport React from 'react';\nimport Button from './Button';\nimport PropTypes from 'prop-types';\n/**\n * ToDo入力フィールドのコンポ\n */\n\nvar InputFeild =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(InputFeild, _React$Component);\n\n  function InputFeild(props) {\n    var _this;\n\n    _classCallCheck(this, InputFeild);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(InputFeild).call(this, props));\n    _this.state = {\n      task: '',\n      todoList: props.todoList //おまじない\n\n    };\n    _this.handleTask = _this.handleTask.bind(_assertThisInitialized(_this));\n    _this.putMsg = _this.putMsg.bind(_assertThisInitialized(_this));\n    return _this;\n  } // stateに保持しておく値を書き換える\n\n\n  _createClass(InputFeild, [{\n    key: \"handleTask\",\n    value: function handleTask(event) {\n      var inputValue = event.target.value;\n      this.setState({\n        task: inputValue\n      });\n    } //関数\n\n  }, {\n    key: \"putMsg\",\n    value: function putMsg() {\n      var text = this.state.task;\n      var aftTodoList = this.state.todoList;\n      aftTodoList.push({\n        id: aftTodoList.length + 1,\n        task: text,\n        flag: false\n      }); //setStateは関数\n\n      this.setState({\n        todoList: aftTodoList,\n        //入力値\n        task: ''\n      });\n    }\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      e.preventDefault();\n\n      if (!this.state.task.length) {\n        return;\n      }\n\n      var newItem = {\n        task: this.state.task,\n        id: Date.now()\n      };\n      this.setState(function (state) {\n        return {\n          items: state.items.concat(newItem),\n          task: ''\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: \"textarea\",\n        type: \"text\",\n        name: \"text\",\n        value: this.state.task,\n        onChange: this.handleTask,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        label: \"\\u8FFD\\u52A0\",\n        onClick: this.putMsg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"\\u8FFD\\u52A0\")));\n    }\n  }]);\n\n  return InputFeild;\n}(React.Component);\n\nInputFeild.propTypes = {\n  label: PropTypes.string.isRequired\n};\nexport default InputFeild;","map":{"version":3,"sources":["/Users/ayumisekine/todo_app/src/compornents/InputField.jsx"],"names":["React","Button","PropTypes","InputFeild","props","state","task","todoList","handleTask","bind","putMsg","event","inputValue","target","value","setState","text","aftTodoList","push","id","length","flag","e","preventDefault","newItem","Date","now","items","concat","handleSubmit","Component","propTypes","label","string","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA;;;;IAGMC,U;;;;;AAEF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,oFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,EADG;AAETC,MAAAA,QAAQ,EAAEH,KAAK,CAACG,QAFP,CAKb;;AALa,KAAb;AAMA,UAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,+BAAlB;AACA,UAAKC,MAAL,GAAc,MAAKA,MAAL,CAAYD,IAAZ,+BAAd;AATe;AAUlB,G,CAED;;;;;+BACWE,K,EAAO;AACd,UAAMC,UAAU,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAhC;AACA,WAAKC,QAAL,CAAc;AACVT,QAAAA,IAAI,EAAEM;AADI,OAAd;AAGH,K,CAED;;;;6BACS;AACL,UAAMI,IAAI,GAAG,KAAKX,KAAL,CAAWC,IAAxB;AACA,UAAMW,WAAW,GAAG,KAAKZ,KAAL,CAAWE,QAA/B;AACAU,MAAAA,WAAW,CAACC,IAAZ,CAAiB;AAAEC,QAAAA,EAAE,EAAEF,WAAW,CAACG,MAAZ,GAAqB,CAA3B;AAA8Bd,QAAAA,IAAI,EAAEU,IAApC;AAA0CK,QAAAA,IAAI,EAAE;AAAhD,OAAjB,EAHK,CAIL;;AACA,WAAKN,QAAL,CAAc;AACVR,QAAAA,QAAQ,EAAEU,WADA;AACY;AACtBX,QAAAA,IAAI,EAAE;AAFI,OAAd;AAIH;;;iCAEYgB,C,EAAG;AACZA,MAAAA,CAAC,CAACC,cAAF;;AACA,UAAI,CAAC,KAAKlB,KAAL,CAAWC,IAAX,CAAgBc,MAArB,EAA6B;AACzB;AACH;;AACD,UAAMI,OAAO,GAAG;AACZlB,QAAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,IADL;AAEZa,QAAAA,EAAE,EAAEM,IAAI,CAACC,GAAL;AAFQ,OAAhB;AAIA,WAAKX,QAAL,CAAc,UAAAV,KAAK;AAAA,eAAK;AACpBsB,UAAAA,KAAK,EAAEtB,KAAK,CAACsB,KAAN,CAAYC,MAAZ,CAAmBJ,OAAnB,CADa;AAEpBlB,UAAAA,IAAI,EAAE;AAFc,SAAL;AAAA,OAAnB;AAIH;;;6BAEQ;AACL,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAM,QAAA,QAAQ,EAAE,KAAKuB,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI;AAAO,QAAA,SAAS,EAAC,UAAjB;AAA4B,QAAA,IAAI,EAAC,MAAjC;AAAwC,QAAA,IAAI,EAAC,MAA7C;AAAoD,QAAA,KAAK,EAAE,KAAKxB,KAAL,CAAWC,IAAtE;AAA4E,QAAA,QAAQ,EAAE,KAAKE,UAA3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAGI;AAAQ,QAAA,KAAK,EAAC,cAAd;AAAmB,QAAA,OAAO,EAAE,KAAKE,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAHJ,CADJ,CADJ;AASH;;;;EA3DoBV,KAAK,CAAC8B,S;;AA8D/B3B,UAAU,CAAC4B,SAAX,GAAuB;AACnBC,EAAAA,KAAK,EAAE9B,SAAS,CAAC+B,MAAV,CAAiBC;AADL,CAAvB;AAIA,eAAe/B,UAAf","sourcesContent":["import React from 'react';\n\nimport Button from './Button';\nimport PropTypes from 'prop-types';\n\n/**\n * ToDo入力フィールドのコンポ\n */\nclass InputFeild extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            task: '',\n            todoList: props.todoList\n        }\n\n        //おまじない\n        this.handleTask = this.handleTask.bind(this);\n        this.putMsg = this.putMsg.bind(this);\n    }\n\n    // stateに保持しておく値を書き換える\n    handleTask(event) {\n        const inputValue = event.target.value\n        this.setState({\n            task: inputValue\n        });\n    }\n\n    //関数\n    putMsg() {\n        const text = this.state.task\n        const aftTodoList = this.state.todoList\n        aftTodoList.push({ id: aftTodoList.length + 1, task: text, flag: false });\n        //setStateは関数\n        this.setState({\n            todoList: aftTodoList,//入力値\n            task: ''\n        });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        if (!this.state.task.length) {\n            return;\n        }\n        const newItem = {\n            task: this.state.task,\n            id: Date.now()\n        };\n        this.setState(state => ({\n            items: state.items.concat(newItem),\n            task: ''\n        }));\n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.handleSubmit}>\n                    <input className=\"textarea\" type=\"text\" name=\"text\" value={this.state.task} onChange={this.handleTask} />\n                    {/* <Button label={this.props.label} onClick={this.putMsg} /> */}\n                    <button label=\"追加\" onClick={this.putMsg} >追加</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nInputFeild.propTypes = {\n    label: PropTypes.string.isRequired\n}\n\nexport default InputFeild;"]},"metadata":{},"sourceType":"module"}